1) Download anaconda from https://repo.anaconda.com/archive/Anaconda3-2021.05-Linux-x86_64.sh

$ bash Anaconda3-5.1.0-Linux-x86_64.sh -b -p ~/anaconda

$ echo export PATH=~/anaconda/bin:$PATH >> ~/.bashrc
echo "# Disable the default Nouveau kernel driver" | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf
echo "# -----------------------------------------" | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf
echo "blacklist nouveau" | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf
echo "blacklist lbm-nouveau" | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf
echo "options nouveau modeset=0" | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf
echo "alias nouveau off" | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf
echo "alias lbm-nouveau off" | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf

$ source ~/.bashrc

$ conda update conda


2) Download Cuda toolkit from
https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=18.04&target_type=deb_local

Follow given steps for ubuntu on that link:

Download:
wget https://developer.download.nvidia.com/compute/cuda/11.4.1/local_installers/cuda-repo-ubuntu1804-11-4-local_11.4.1-470.57.02-1_amd64.deb

wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin
sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
wget https://developer.download.nvidia.com/compute/cuda/11.4.1/local_installers/cuda-repo-ubuntu1804-11-4-local_11.4.1-470.57.02-1_amd64.deb
sudo dpkg -i cuda-repo-ubuntu1804-11-4-local_11.4.1-470.57.02-1_amd64.deb
sudo apt-key add /var/cuda-repo-ubuntu1804-11-4-local/7fa2af80.pub
sudo apt-get update
sudo apt-get -y install cuda
===========
Additional steps:
sudo apt-get install nvidia-gds   

3) Need to install gcc 6.0 for Cuda 11
sudo apt install gcc (Ubuntu 18.04 => Default version is gcc 7.5)
gcc -v => to check version

2.1. Verify You Have a CUDA-Capable GPU
lspci | grep -i nvidia
2.2. Verify You Have a Supported Version of Linux
$ uname -m && cat /etc/*release

2.3 kernel
$ uname -r
5.4.0-80-generic
3.8. Ubuntu


======================================
Summary of installation steps given: https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#ubuntu-installation
    Perform the pre-installation actions.
    https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#pre-installation-actions
    
    Install repository meta-data

    $ sudo dpkg -i cuda-repo-<distro>_<version>_<architecture>.deb
    

    Install the CUDA public GPG key

    When installing using the local repo:

    $ sudo apt-key add /var/cuda-repo-<distro>-<version>/7fa2af80.pub

    When installing using network repo on Ubuntu 20.04/18.04:

    $ sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/<distro>/<architecture>/7fa2af80.pub

    When installing using network repo on Ubuntu 16.04:

    $ sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/<distro>/<architecture>/7fa2af80.pub

    Pin file to prioritize CUDA repository:

    $ wget https://developer.download.nvidia.com/compute/cuda/repos/<distro>/<architecture>/cuda-<distro>.pin
    $ sudo mv cuda-<distro>.pin /etc/apt/preferences.d/cuda-repository-pin-600

    Update the Apt repository cache

    $ sudo apt-get update

    Install CUDA
    Note: These two commands must be executed separately.

    $ sudo apt-get install cuda

    To include all GDS packages:

    $ sudo apt-get install nvidia-gds 

    Perform the post-installation actions.
    https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#post-installation-actions
======================================
Post installation steps:
export PATH=/usr/local/cuda-11.4/bin${PATH:+:${PATH}}

The NVIDIA Persistence Daemon should be automatically started for POWER9 installations. Check that it is running with the following command:

$ systemctl status nvidia-persistenced

If it is not active, run the following command:

$ sudo systemctl enable nvidia-persistenced


$ sudo cp /lib/udev/rules.d/40-vm-hotadd.rules /etc/udev/rules.d
$ sudo sed -i '/SUBSYSTEM=="memory", ACTION=="add"/d' /etc/udev/rules.d/40-vm-hotadd.rules

// ##################### CAUTION #################
// Installing Cuda Toolkit using Deb file automatically install Nividia Driver hence, folloowing Step is not required.
Download Nvidia display driver as per version matching:
Version matching can be checked on : https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html

First check compatible version of driver using following command:
$ ubuntu-drivers devices
Install automatically using following command based on abover recommended version:

sudo apt-get install nvidia-driver-470-server // version would vary

############################################ End of Not-required steps ##################

ANOTHER METHOD TO INSTALL CUDA TOOLKIT AND DRIVER ------------>
## Manaully download and install can be tried out:

download this file from Nvidia site and 
"cuda_11.2.0_460.27.04_linux.run"
sudo sh cuda_11.2.0_460.27.04_linux.run

Do not select driver here
Driver:   Not Selected
Toolkit:  Installed in /usr/local/cuda-11.2/
Samples:  Installed in /home/kravi/

Please make sure that
 -   PATH includes /usr/local/cuda-11.2/bin
 -   LD_LIBRARY_PATH includes /usr/local/cuda-11.2/lib64, or, add /usr/local/cuda-11.2/lib64 to /etc/ld.so.conf and run ldconfig as root

To uninstall the CUDA Toolkit, run cuda-uninstaller in /usr/local/cuda-11.2/bin
***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 460.00 is required for CUDA 11.2 functionality to work.
To install the driver using this installer, run the following command, replacing <CudaInstaller> with the name of this run file:
    sudo sh <CudaInstaller>.run --silent --driver

================================================

Setup following variables:

$ export PATH=/usr/local/cuda-11.4/bin${PATH:+:${PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda-11.4/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}


You might also want to build CUDA samples and run it. It will take a while. 
For that you need to jump to CUDA sample directory. 
For me it is /usr/local/cuda-10.0/samples and run

$ sudo make

After that go to built sources

$ /usr/local/cuda-11.4/samples/bin/x86_64/linux/release

and execute ./deviceQuery and ./bandwidthTest

 

### Disable auto update, which will cause error.

Open sudo nano /etc/modprobe.d/blacklist.conf  and put following lines:

#blacklist amd76x_edac #this might not be required for x86 32 bit users.

blacklist vga16fb

blacklist nouveau

blacklist rivafb

blacklist nvidiafb

blacklist rivatv

Manually download CuDNN libraries from nvidia site by logging using email:
website: https://developer.nvidia.com/rdp/cudnn-download

cuDNN Runtime Library for Ubuntu18.04 x86_64 (Deb)
cuDNN Developer Library for Ubuntu18.04 x86_64 (Deb)
cuDNN Code Samples and User Guide for Ubuntu18.04 x86_64 (Deb)

sudo dpkg -i libcudnn8_8.2.2.26-1+cuda11.4_amd64.deb 
sudo dpkg -i libcudnn8-dev_8.2.2.26-1+cuda11.4_amd64.deb
sudo dpkg -i libcudnn8-samples_8.2.2.26-1+cuda11.4_amd64.deb

CuDNN installation steps can be found on [link]https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html

2.4. Verifying The Install On Linux
To verify that cuDNN is installed and is running properly, compile the mnistCUDNN sample located in the /usr/src/cudnn_samples_v8 directory in the Debian file.
Procedure

    Copy the cuDNN samples to a writable path.

    $cp -r /usr/src/cudnn_samples_v8/ $HOME

    Go to the writable path.

    $ cd  $HOME/cudnn_samples_v8/mnistCUDNN

    Compile the mnistCUDNN sample.

    $make clean && make

    Run the mnistCUDNN sample.

    $ ./mnistCUDNN

    If cuDNN is properly installed and running on your Linux system, you will see a message similar to the following:

    Test passed!


#### If you get error FreeImage.h not found:

$ sudo apt-get install g++ freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libglu1-mesa libglu1-mesa-dev
$ sudo apt-get install libfreeimage3 libfreeimage-dev


## setup envv

conda create -n v38 python=3.8 anaconda
#Initiate current shell to use conda activate

$ conda init bash

# Close the shell and reopen it.

Pip installing TF

## If black screen after driver installation

https://askubuntu.com/questions/1129516/black-screen-at-boot-after-nvidia-driver-installation-on-ubuntu-18-04-2-lts


echo "# Disable the default Nouveau kernel driver" | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf
echo "# -----------------------------------------" | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf
echo "blacklist nouveau" | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf
echo "blacklist lbm-nouveau" | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf
echo "options nouveau modeset=0" | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf
echo "alias nouveau off" | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf
echo "alias lbm-nouveau off" | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf


some useful links:

https://linuxconfig.org/how-to-uninstall-the-nvidia-drivers-on-ubuntu-20-04-focal-fossa-linux

